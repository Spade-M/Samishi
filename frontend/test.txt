<div>
      <div className="menu">
        <nav className="navbar navbar-expand-lg bg-body-tertiary">
          <div className="container-fluid">
            <a className="navbar-brand" href="/">
              <img src={Logo} alt="Bootstrap" width="30" height="30" />
            </a>
            <button
              className="navbar-toggler"
              type="button"
              data-bs-toggle="collapse"
              data-bs-target="/navbarNavDropdown"
              aria-controls="navbarNavDropdown"
              aria-expanded="false"
              aria-label="Toggle navigation"
            >
              <span className="navbar-toggler-icon"></span>
            </button>
            <div className="collapse navbar-collapse" id="navbarNavDropdown">
              <ul className="navbar-nav">
                <li className="nav-item">
                  <a className="nav-link active" aria-current="page" href="/">
                    Home
                  </a>
                </li>
                <li className="nav-item">
                  <a className="nav-link" href="/posts">
                    Posts
                  </a>
                </li>
                <li className="nav-item">
                  <a className="nav-link" href="/about">
                    About Us
                  </a>
                </li>
                <li className="nav-item">
                  <a className="nav-link" href="/">
                    About Us
                  </a>
                </li>
                <li className="nav-item dropdown">
                  <a
                    className="nav-link dropdown-toggle"
                    href="/"
                    role="button"
                    data-bs-toggle="dropdown"
                    aria-expanded="false"
                  >
                    More
                  </a>
                  <ul className="dropdown-menu">
                    <li>
                      <a className="dropdown-item" href="/">
                        Adoption
                      </a>
                    </li>
                    <li>
                      <a className="dropdown-item" href="/">
                        Another action
                      </a>
                    </li>
                    <li>
                      <a className="dropdown-item" href="/">
                        Something else here
                      </a>
                    </li>
                  </ul>
                </li>
              </ul>
            </div>
          </div>
        </nav>
      </div>
      
    </div>


 <li className="nav-item dropdown">
                  <a
                    className="nav-link dropdown-toggle"
                    href="#"
                    role="button"
                    data-bs-toggle="dropdown"
                    aria-expanded="false"
                  >
                    Dropdown
                  </a>
                  <ul className="dropdown-menu dropdown-menu-dark">
                    <li>
                      <a className="dropdown-item" href="#">
                        Action
                      </a>
                    </li>
                    <li>
                      <a className="dropdown-item" href="#">
                        Another action
                      </a>
                    </li>
                    <li>
                      <hr className="dropdown-divider" />
                    </li>
                    <li>
                      <a className="dropdown-item" href="#">
                        Something else here
                      </a>
                    </li>
                  </ul>
                </li>
              #f5e3fc

              <form className="d-flex mt-3" role="search">
                <input
                  className="form-control me-2"
                  type="search"
                  placeholder="Search"
                  aria-label="Search"
                />


                <div>
      
    </div>



    import React from "react";

const Posts = () => {
  return (
    <div>
      <form action="" method="post" encType="multipart/form-data">
        <input type="file" name="file[]" id="files" multiple />
        <br />
        <br />
        <input
          type="text"
          name="caption"
          id="caption"
          placeholder="Write Something"
        />
        <br />
        <br />
        <input type="button" id="submit" value="Upload" />
      </form>
      <br />
      <div id="preview"></div>
      

    </div>
  );
};

export default Posts;


import React, { useState } from "react";
import axios from "axios";

const Login = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [success, setSuccess] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setSuccess(false);

    try {
      const response = await axios.post(
        "http://localhost:8000/api/login/",
        { username, password },
        { withCredentials: true } // Include cookies for session authentication
      );

      console.log("Login successful!", response.data);
      setSuccess(true);
      // Redirect to Posts.jsx page after login
      window.location.href = "/posts";
    } catch (error) {
      if (error.response) {
        setError(error.response.data.error || "Login failed");
        console.error("Login failed:", error.response.data);
      } else if (error.request) {
        setError("No response from the server.");
        console.error("No response:", error.request);
      } else {
        setError("An error occurred: " + error.message);
        console.error("Error:", error);
      }
    }
  };

  return (
    <div className="container mt-4">
      <h2>Login</h2>
      <form onSubmit={handleSubmit}>
        <div className="mb-3">
          <label htmlFor="username" className="form-label">
            Username
          </label>
          <input
            type="text"
            className="form-control"
            id="username"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            required
          />
        </div>
        <div className="mb-3">
          <label htmlFor="password" className="form-label">
            Password
          </label>
          <input
            type="password"
            className="form-control"
            id="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>

        <button type="submit" className="btn btn-primary">
          Login
        </button>

        {error && <p className="text-danger mt-2">{error}</p>}
        {success && <p className="text-success mt-2">Login successful!</p>}
      </form>
    </div>
  );
};

export default Login;


<div className="text-center" style={{ position: "absolute", top: "-50px", left: "50%", transform: "translateX(-50%)" }}>
          <img
            src= {logo}
            alt="Peeking Cat"
            className="img-fluid"
            style={{ width: "100px" }}
          />
        </div>

            <div className="d-flex justify-content-center align-items-center vh-100" style={{ backgroundColor: "#f4f4f4" }}>




            import React, { useState } from "react";
import cat1 from "/peakingLogo.png";

const Posts = () => {
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [imagePreviews, setImagePreviews] = useState([]);

  const handleFileChange = (event) => {
    const files = Array.from(event.target.files); // Convert FileList to Array
    setSelectedFiles(files);

    const previews = [];
    files.forEach((file) => {
      if (file.type.startsWith("image/")) {
        // Check if file is an image
        const reader = new FileReader();
        reader.onloadend = () => {
          previews.push(reader.result); // reader.result is the data URL
          if (previews.length === files.length) {
            setImagePreviews(previews); // Update state after all previews are loaded
          }
        };
        reader.readAsDataURL(file); // Read file as Data URL
      } else {
        // Handle non-image files (optional: display error, ignore, etc.)
        console.warn("File is not an image:", file.name);
        // Optionally, you could remove the non-image file from selectedFiles and previews
      }
    });
    if (files.length === 0) {
      setImagePreviews([]); // Clear previews if no files are selected
    }
  };

  const handleSubmit = (event) => {
    event.preventDefault(); // Prevent default form submission (for client-side handling)
    // In a real application, you would handle form submission here
    // e.g., using fetch or axios to send data to the server
    console.log("Form submitted with files:", selectedFiles);
    console.log("Caption:", event.target.caption.value);
    // You would typically FormData to send files and caption in a real scenario
  };

  return (
    <>
      <div style={{ width: "300px" }}>
        <img
          src={cat1}
          alt="Peeking Cat"
          className="img-fluid"
          style={{ width: "400px", top: "55px", position: "relative",alignItems: "center", justifyContent: "center"}}
        ></img>
      </div>

      <div
        style={{
          maxWidth: "600px",
          margin: "0px auto",
          padding: "20px",
          border: "1px solid #ccc",
          borderRadius: "20px",
          background: "rgb(246, 212, 247)",
        }}
      >
        <h2 style={{ textAlign: "center", marginBottom: "20px" }}>
          Create Post
        </h2>
        <form onSubmit={handleSubmit} encType="multipart/form-data">
          <div style={{ marginBottom: "15px" }}>
            <label
              htmlFor="files"
              style={{
                display: "block",
                marginBottom: "5px",
                fontWeight: "bold",
              }}
            >
              Upload Images:
            </label>
            <input
              type="file"
              name="file" // Changed to "file" instead of "file[]" for single file upload
              id="files"
              multiple // Keep multiple if you want multiple image upload
              onChange={handleFileChange}
              accept="image/*" // Optional: restrict to image files
              style={{
                padding: "8px",
                border: "1px solid #ddd",
                borderRadius: "10px",
                width: "100%",
                boxSizing: "border-box",
                background: "#eaa9ee",
              }}
            />
          </div>
          <div style={{ marginBottom: "20px" }}>
            <label
              htmlFor="caption"
              style={{
                display: "block",
                marginBottom: "5px",
                fontWeight: "bold",
              }}
            >
              Caption:
            </label>
            <textarea
              name="caption"
              id="caption"
              placeholder="Write Something..."
              style={{
                backgroundColor: "#eaa9ee",
                color: "#333",
                padding: "8px",
                border: "1px solid #ddd",
                borderRadius: "10px",
                width: "100%",
                boxSizing: "border-box",
                minHeight: "80px",
                resize: "vertical",
                background: "#eaa9ee",
              }}
            />
          </div>
          <button
            type="submit" // Changed type to "submit" for form submission
            id="submit"
            style={{
              padding: "10px 20px",
              backgroundColor: "#007bff",
              color: "white",
              border: "1px solid transparent",
              padding: "0.6em 1.2em",
              borderRadius: "20px",
              cursor: "pointer",
              fontSize: "1em",
              fontWeight: "500",
            }}
          >
            Upload Post
          </button>
        </form>
        <div
          id="preview"
          style={{
            marginTop: "20px",
            display: "flex",
            flexWrap: "wrap",
            backgroundColor: "#f8dff8",
          }}
        >
          {imagePreviews.map((preview, index) => (
            <div
              key={index}
              style={{
                margin: "5px",
                width: "100px",
                height: "100px",
                overflow: "hidden",
                borderRadius: "8px",
                boxShadow: "0 4px 8px rgba(234, 169, 238, 0.5)",
      
              }}
            >
              <img
                src={preview}
                alt={`Preview ${index + 1}`}
                style={{ width: "100%", height: "100%", objectFit: "cover" }}
              />
            </div>
          ))}
        </div>
      </div>
    </>
  );
};

export default Posts;



import React, { useState, useEffect } from "react";
import axios from "axios";
import cat1 from "/peakingLogo.png";
const API_URL = "http://localhost:8000/api";
const Posts = () => {
  const [posts, setPosts] = useState([]);
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [imagePreviews, setImagePreviews] = useState([]);
  const [caption, setCaption] = useState("");
  const [currentUser, setCurrentUser] = useState(null);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [loading, setLoading] = useState(true);

  // Clear notifications after 3 seconds
  useEffect(() => {
    if (errorMessage || successMessage) {
      const timer = setTimeout(() => {
        setErrorMessage("");
        setSuccessMessage("");
      }, 3000);
      return () => clearTimeout(timer);
    }
  }, [errorMessage, successMessage]);

  // Fetch posts and user info on mount
  useEffect(() => {
    const fetchPosts = async () => {
      try {
        const response = await axios.get(`${API_URL}/posts/`, { withCredentials: true });
        setPosts(response.data);
      } catch (error) {
        console.error("Error fetching posts", error);
        setErrorMessage("Error fetching posts.");
      } finally {
        setLoading(false);
      }
    };

    const fetchUser = async () => {
      try {
        const res = await axios.get(`${API_URL}/user/`, { withCredentials: true });
        setCurrentUser(res.data.username);
      } catch (error) {
        console.error("Error fetching user info", error);
        setErrorMessage("Error fetching user info.");
      }
    };

    fetchPosts();
    fetchUser();
  }, []);

  const handleFileChange = (event) => {
    const files = Array.from(event.target.files);
    const validImageFiles = [];
    const previews = [];

    files.forEach((file) => {
      if (file.type.startsWith("image/")) {
        validImageFiles.push(file);
        const reader = new FileReader();
        reader.onloadend = () => {
          previews.push(reader.result);
          if (previews.length === validImageFiles.length) {
            setImagePreviews(previews);
          }
        };
        reader.readAsDataURL(file);
      } else {
        console.warn("File is not an image:", file.name);
      }
    });

    setSelectedFiles(validImageFiles);
    if (files.length === 0) {
      setImagePreviews([]);
    }
  };

  // Function to remove a selected image
  const handleRemoveImage = (indexToRemove) => {
    const updatedFiles = selectedFiles.filter((_, index) => index !== indexToRemove);
    const updatedPreviews = imagePreviews.filter((_, index) => index !== indexToRemove);
    setSelectedFiles(updatedFiles);
    setImagePreviews(updatedPreviews);
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    setErrorMessage("");
    setSuccessMessage("");

    // Client-side validation:
    if (selectedFiles.length === 0) {
      setErrorMessage("Please select at least one image file.");
      return;
    }
    if (!caption.trim()) {
      setErrorMessage("Please enter a caption for your post.");
      return;
    }
    const invalidFiles = selectedFiles.filter(file => !file.type.startsWith("image/"));
    if (invalidFiles.length > 0) {
      setErrorMessage("One or more selected files are not valid images.");
      return;
    }

    const formData = new FormData();
    formData.append("caption", caption);
    selectedFiles.forEach((file) => {
      formData.append("images", file);
    });

    try {
      const response = await axios.post(`${API_URL}/posts/`, formData, {
        headers: { "Content-Type": "multipart/form-data" },
        withCredentials: true,
      });
      // Prepend the new post to the feed
      setPosts([response.data, ...posts]);
      setSelectedFiles([]);
      setImagePreviews([]);
      setCaption("");
      setSuccessMessage("Post uploaded successfully!");
    } catch (error) {
      console.error("Error uploading post", error);
      setErrorMessage("Error uploading post. Please try again.");
    }
  };

  const handleDelete = async (postId) => {
    try {
      await axios.delete(`${API_URL}/posts/${postId}/`, { withCredentials: true });
      setPosts(posts.filter(post => post.id !== postId));
      setSuccessMessage("Post deleted successfully!");
    } catch (error) {
      console.error("Error deleting post", error);
      setErrorMessage("Error deleting post. Please try again.");
    }
  };

  return (
    <div className="flex flex-col items-center bg-gray-100 min-h-screen p-5">
      {/* Logo Section */}
      <div style={{ width: "300px" }}>
        <img
          src={cat1}
          alt="Peeking Cat"
          className="img-fluid"
          style={{
            width: "400px",
            top: "55px",
            position: "relative",
            alignItems: "center",
            justifyContent: "center",
          }}
        />
      </div>

      {/* Notifications */}
      {errorMessage && (
        <div style={{ color: "red", marginBottom: "15px", fontWeight: "bold" }}>{errorMessage}</div>
      )}
      {successMessage && (
        <div style={{ color: "green", marginBottom: "15px", fontWeight: "bold" }}>{successMessage}</div>
      )}

<button
        onClick={() => setIsModalOpen(true)}
        className="bg-blue-500 text-white px-4 py-2 rounded-full mb-5"
      >
        Create Post
      </button>

      
      {/* Upload Form */}
      <div
        style={{
          maxWidth: "600px",
          margin: "0 auto",
          padding: "20px",
          border: "1px solid #ccc",
          borderRadius: "20px",
          background: "rgb(246, 212, 247)",
        }}
      >
        <h2 style={{ textAlign: "center", marginBottom: "20px" }}>Create Post</h2>
        <form onSubmit={handleSubmit}>
          <div style={{ marginBottom: "15px" }}>
            <label htmlFor="files" style={{ display: "block", marginBottom: "5px", fontWeight: "bold" }}>
              Upload Images:
            </label>
            <input
              type="file"
              multiple
              onChange={handleFileChange}
              accept="image/*"
              style={{
                padding: "8px",
                border: "1px solid #ddd",
                borderRadius: "10px",
                width: "100%",
                boxSizing: "border-box",
                background: "#eaa9ee",
              }}
            />
          </div>
          <div style={{ marginBottom: "20px" }}>
            <label htmlFor="caption" style={{ display: "block", marginBottom: "5px", fontWeight: "bold" }}>
              Caption:
            </label>
            <textarea
              value={caption}
              onChange={(e) => setCaption(e.target.value)}
              placeholder="Write Something..."
              style={{
                backgroundColor: "#eaa9ee",
                padding: "8px",
                border: "1px solid #ddd",
                borderRadius: "10px",
                width: "100%",
                minHeight: "80px",
                resize: "vertical",
              }}
            />
          </div>
          <button
            type="submit"
            style={{
              padding: "10px 20px",
              backgroundColor: "#007bff",
              color: "white",
              border: "1px solid transparent",
              borderRadius: "20px",
              cursor: "pointer",
              fontSize: "1em",
              fontWeight: "500",
            }}
          >
            Upload Post
          </button>
        </form>
        
      

        {/* Image Previews with Remove Option */}
        <div
          style={{
            marginTop: "20px",
            display: "flex",
            flexWrap: "wrap",
            backgroundColor: "#f8dff8",
          }}
        >
          {imagePreviews.map((preview, index) => (
            <div
              key={index}
              style={{
                position: "relative",
                margin: "5px",
                width: "100px",
                height: "100px",
                overflow: "hidden",
                borderRadius: "8px",
                boxShadow: "0 4px 8px rgba(234, 169, 238, 0.5)",
              }}
            >
              <img src={preview} alt={`Preview ${index + 1}`} style={{ width: "100%", height: "100%", objectFit: "cover" }} />
              <button
                onClick={() => handleRemoveImage(index)}
                style={{
                  position: "absolute",
                  top: "2px",
                  right: "2px",
                  background: "rgba(0, 0, 0, 0.6)",
                  color: "white",
                  border: "none",
                  borderRadius: "50%",
                  width: "20px",
                  height: "20px",
                  cursor: "pointer",
                  fontSize: "12px",
                  lineHeight: "20px",
                  textAlign: "center",
                }}
                title="Remove image"
              >
                &times;
              </button>
            </div>
          ))}
        </div>
      </div>

      {/* Feed Section */}
      <div className="mt-5 w-full max-w-md">
        <h2 className="text-lg font-bold text-center mb-3">Feed</h2>
        {loading ? (
          <p className="text-center text-gray-500">Loading posts...</p>
        ) : (
          <div className="flex flex-col items-center gap-5">
            {posts.length === 0 && <p className="text-center text-gray-500">No posts yet!</p>}
            {posts.map((post) => (
              <div
                key={post.id}
                className="p-3 rounded-lg shadow-lg"
                style={{
                  width: "300px",
                  background: "rgb(246, 212, 247)",
                  borderRadius: "12px",
                  boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.1)",
                  overflow: "hidden",
                  marginBottom: "20px",
                }}
              >
                {/* Scrollable Image Container */}
                <div
                  style={{
                    display: "flex",
                    overflowX: "auto",
                    gap: "5px",
                    width: "100%",
                    paddingBottom: "5px",
                  }}
                >
                  {post.images.map((image, imgIndex) => (
                    <img
                      key={imgIndex}
                      src={image.image}
                      alt={`Post ${post.id}`}
                      style={{
                        width: "300px",
                        height: "200px",
                        objectFit: "cover",
                        borderRadius: "8px",
                      }}
                    />
                  ))}
                </div>
                {/* Caption, Username & Timestamp */}
                <div className="mt-2 text-center">
                  <p className="text-gray-700 text-sm">{post.caption}</p>
                  <p className="text-xs text-gray-500">
                    Posted by {post.user} on {post.created_at}
                  </p>
                  {currentUser === post.user && (
                    <button
                      onClick={() => handleDelete(post.id)}
                      style={{
                        marginTop: "5px",
                        padding: "5px 10px",
                        backgroundColor: "#e3342f",
                        color: "#fff",
                        border: "none",
                        borderRadius: "5px",
                        cursor: "pointer",
                      }}
                    >
                      Delete Post
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default Posts;


<div
        style={{
          width: "250px",
          height :"100%",
          backgroundColor: "pink",
          position: "fixed",
          left: "0px",
          top: "0px",
        }}
      >

        {
    key: "sub1",
    label: "Navigation One",
    icon: <MailOutlined />,
    children: [
      {
        key: "5",
        label: "Option 5",
      },
      {
        key: "6",
        label: "Option 6",
      },
      {
        key: "7",
        label: "Option 7",
      },
      {
        key: "8",
        label: "Option 8",
      },
    ],
  },
  {
    key: "sub2",
    label: "Navigation Two",
    icon: <AppstoreOutlined />,
    children: [
      {
        key: "9",
        label: "Option 9",
      },
      {
        key: "10",
        label: "Option 10",
      },
      {
        key: "sub3",
        label: "Submenu",
        children: [
          {
            key: "11",
            label: "Option 11",
          },
          {
            key: "12",
            label: "Option 12",
          },
        ],
      },
    ],
  },






  <div
        style={{
          width: "250px",
          height: "100%",
          backgroundColor: "pink",
          position: "fixed",
          left: "0px",
          top: "50px",
        }}
      >
        <Button
          type="primary"
          onClick={toggleCollapsed}
          style={{
            marginBottom: 16,
            display: "flex",
          }}
        >
          {collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}
        </Button>
        <Menu
          defaultSelectedKeys={["1"]}
          defaultOpenKeys={["sub1"]}
          mode="inline"
          theme="light"
          inlineCollapsed={collapsed}
          items={items}
        />
        <div
          style={{
            width: "100px",
            position: "relative",

            left: "30%",
          }}
        >
          <img
            src={cat1}
            alt="Peeking Cat"
            className="img-fluid"
            style={{
              width: "250%",
            }}
          />
        </div>
      </div>

      import React from 'react'

const Footer = () => {
  return (
    <div>
      <footer className= "bg-purple text-dark py-2">
      <p className= "text-center">
      Copyright &copy; : SamishiCommunity.com
      </p>
    </footer>
    </div>
  )
}

export default Footer



 <div>
        <p id="variable-proximity-demo">
          <div ref={containerRef} style={{ position: "relative" }}>
            <VariableProximity
              label={"More About Us"}
              className={"variable-proximity-demo"}
              fromFontVariationSettings="'wght' 300, 'opsz' 9"
              toFontVariationSettings="'wght' 700, 'opsz' 20"
              containerRef={containerRef}
              radius={100}
              falloff="linear"
            />
          </div>
        </p>
      </div>

import React from "react";
import { useRouteError } from "react-router-dom";

const ErrorPage = () => {
  const error = useRouteError();
  return (
    <div>
      <h1>Oops! Page Not Found</h1>
      <p>{error?.message || "Something went wrong!"}</p>
    </div>
  );
  
};

export default ErrorPage;


 <div style={{ width: "200px", backgroundColor: "red" }}>
          <Sidebar/>
        </div>

<ul className="navbar-nav justify-content-end flex-grow-1 pe-3">
                  <li className="nav-item">
                    <a className="nav-link" href="/posts">
                      Posts
                    </a>
                  </li>
                  <li className="nav-item">
                    <a className="nav-link active" aria-current="page" href="/facts">
                      Cats Facts
                    </a>
                  </li>
                  <li className="nav-item">
                    <a className="nav-link active" aria-current="page" href="/about">
                      About Us
                    </a>
                  </li>
                  <li className="nav-item">
                    <a className="nav-link" href="/userinfo">
                      User Info
                    </a>
                  </li>
              </ul>
              <br />
                <button
                  className="btn btn-danger"
                  type="button"
                  
                >
                  Logout
                </button>
              <br />
        
<div className="flex flex-col items-center bg-gray-100 min-h-screen p-4 sm:p-10 w-full">
      <div className="self-center" style={{ width: "100px", marginTop: "2rem", marginBottom: "1rem" }}>
        <img src={cat1} alt="Peeking Cat" className="w-[250px] h-auto" />
      </div>
      Error uploading post TypeError: posts is not iterable
    at handleSubmit 

    className="w-full h-48 object-cover rounded-lg" // Reduced fixed height
                        
     <h6>
        Note : Text Us the post id og animals along with your address, so we can
        check the availability of it for you{" "}
      </h6>